; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.24215.1 

	TITLE	hello.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
$SG90573 DB	'WindowClass', 00H
$SG90575 DB	'Hello, World!', 00H
	ORG $+2
$SG90576 DB	'WindowClass', 00H
_DATA	ENDS
PUBLIC	_WinMain@16
PUBLIC	_WindowProc@16
PUBLIC	_OnPaint
PUBLIC	_DrawTriangle
EXTRN	__imp__GetStockObject@4:PROC
EXTRN	__imp__GradientFill@24:PROC
EXTRN	__imp__TranslateMessage@4:PROC
EXTRN	__imp__DispatchMessageA@4:PROC
EXTRN	__imp__PeekMessageA@20:PROC
EXTRN	__imp__DefWindowProcA@16:PROC
EXTRN	__imp__PostQuitMessage@4:PROC
EXTRN	__imp__RegisterClassExA@4:PROC
EXTRN	__imp__CreateWindowExA@48:PROC
EXTRN	__imp__DestroyWindow@4:PROC
EXTRN	__imp__ShowWindow@8:PROC
EXTRN	__imp__BeginPaint@8:PROC
EXTRN	__imp__EndPaint@8:PROC
EXTRN	__imp__LoadCursorA@8:PROC
EXTRN	__imp__LoadIconA@8:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	___security_cookie:DWORD
; Function compile flags: /Odtp
_TEXT	SEGMENT
_HEIGHT$ = -72						; size = 4
_WIDTH$ = -68						; size = 4
_gTriangle$ = -64					; size = 12
_vertex$ = -52						; size = 48
__$ArrayPad$ = -4					; size = 4
_hdc$ = 8						; size = 4
_DrawTriangle PROC
; File hello.c
; Line 100
	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 101
	mov	DWORD PTR _WIDTH$[ebp], 640		; 00000280H
; Line 102
	mov	DWORD PTR _HEIGHT$[ebp], 480		; 000001e0H
; Line 105
	mov	eax, DWORD PTR _WIDTH$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	ecx, 16					; 00000010H
	imul	edx, ecx, 0
	mov	DWORD PTR _vertex$[ebp+edx], eax
; Line 106
	mov	eax, DWORD PTR _HEIGHT$[ebp]
	cdq
	and	edx, 3
	add	eax, edx
	sar	eax, 2
	mov	ecx, 16					; 00000010H
	imul	edx, ecx, 0
	mov	DWORD PTR _vertex$[ebp+edx+4], eax
; Line 107
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	mov	edx, 65535				; 0000ffffH
	mov	WORD PTR _vertex$[ebp+ecx+8], dx
; Line 108
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	xor	edx, edx
	mov	WORD PTR _vertex$[ebp+ecx+10], dx
; Line 109
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	xor	edx, edx
	mov	WORD PTR _vertex$[ebp+ecx+12], dx
; Line 110
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	xor	edx, edx
	mov	WORD PTR _vertex$[ebp+ecx+14], dx
; Line 112
	imul	eax, DWORD PTR _WIDTH$[ebp], 3
	cdq
	and	edx, 3
	add	eax, edx
	sar	eax, 2
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	DWORD PTR _vertex$[ebp+ecx], eax
; Line 113
	imul	eax, DWORD PTR _HEIGHT$[ebp], 3
	cdq
	and	edx, 3
	add	eax, edx
	sar	eax, 2
	mov	edx, 16					; 00000010H
	shl	edx, 0
	mov	DWORD PTR _vertex$[ebp+edx+4], eax
; Line 114
	mov	eax, 16					; 00000010H
	shl	eax, 0
	xor	ecx, ecx
	mov	WORD PTR _vertex$[ebp+eax+8], cx
; Line 115
	mov	edx, 16					; 00000010H
	shl	edx, 0
	mov	eax, 65535				; 0000ffffH
	mov	WORD PTR _vertex$[ebp+edx+10], ax
; Line 116
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	xor	edx, edx
	mov	WORD PTR _vertex$[ebp+ecx+12], dx
; Line 117
	mov	eax, 16					; 00000010H
	shl	eax, 0
	xor	ecx, ecx
	mov	WORD PTR _vertex$[ebp+eax+14], cx
; Line 119
	mov	eax, DWORD PTR _WIDTH$[ebp]
	cdq
	and	edx, 3
	add	eax, edx
	sar	eax, 2
	mov	edx, 16					; 00000010H
	shl	edx, 1
	mov	DWORD PTR _vertex$[ebp+edx], eax
; Line 120
	imul	eax, DWORD PTR _HEIGHT$[ebp], 3
	cdq
	and	edx, 3
	add	eax, edx
	sar	eax, 2
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	mov	DWORD PTR _vertex$[ebp+ecx+4], eax
; Line 121
	mov	edx, 16					; 00000010H
	shl	edx, 1
	xor	eax, eax
	mov	WORD PTR _vertex$[ebp+edx+8], ax
; Line 122
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	xor	edx, edx
	mov	WORD PTR _vertex$[ebp+ecx+10], dx
; Line 123
	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	ecx, 65535				; 0000ffffH
	mov	WORD PTR _vertex$[ebp+eax+12], cx
; Line 124
	mov	edx, 16					; 00000010H
	shl	edx, 1
	xor	eax, eax
	mov	WORD PTR _vertex$[ebp+edx+14], ax
; Line 127
	mov	DWORD PTR _gTriangle$[ebp], 0
; Line 128
	mov	DWORD PTR _gTriangle$[ebp+4], 1
; Line 129
	mov	DWORD PTR _gTriangle$[ebp+8], 2
; Line 131
	push	2
	push	1
	lea	ecx, DWORD PTR _gTriangle$[ebp]
	push	ecx
	push	3
	lea	edx, DWORD PTR _vertex$[ebp]
	push	edx
	mov	eax, DWORD PTR _hdc$[ebp]
	push	eax
	call	DWORD PTR __imp__GradientFill@24
; Line 132
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_DrawTriangle ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_hdc$ = 8						; size = 4
_OnPaint PROC
; File hello.c
; Line 95
	push	ebp
	mov	ebp, esp
; Line 96
	mov	eax, DWORD PTR _hdc$[ebp]
	push	eax
	call	_DrawTriangle
	add	esp, 4
; Line 97
	pop	ebp
	ret	0
_OnPaint ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_hdc$ = -76						; size = 4
tv64 = -72						; size = 4
_ps$ = -68						; size = 64
__$ArrayPad$ = -4					; size = 4
_hWnd$ = 8						; size = 4
_uMsg$ = 12						; size = 4
_wParam$ = 16						; size = 4
_lParam$ = 20						; size = 4
_WindowProc@16 PROC
; File hello.c
; Line 70
	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 73
	mov	eax, DWORD PTR _uMsg$[ebp]
	mov	DWORD PTR tv64[ebp], eax
	cmp	DWORD PTR tv64[ebp], 2
	je	SHORT $LN5@WindowProc
	cmp	DWORD PTR tv64[ebp], 15			; 0000000fH
	je	SHORT $LN6@WindowProc
	cmp	DWORD PTR tv64[ebp], 16			; 00000010H
	je	SHORT $LN4@WindowProc
	jmp	SHORT $LN7@WindowProc
$LN4@WindowProc:
; Line 76
	push	0
	call	DWORD PTR __imp__PostQuitMessage@4
; Line 77
	jmp	SHORT $LN2@WindowProc
$LN5@WindowProc:
; Line 80
	xor	eax, eax
	jmp	SHORT $LN1@WindowProc
$LN6@WindowProc:
; Line 83
	lea	ecx, DWORD PTR _ps$[ebp]
	push	ecx
	mov	edx, DWORD PTR _hWnd$[ebp]
	push	edx
	call	DWORD PTR __imp__BeginPaint@8
	mov	DWORD PTR _hdc$[ebp], eax
; Line 84
	mov	eax, DWORD PTR _hdc$[ebp]
	push	eax
	call	_OnPaint
	add	esp, 4
; Line 85
	lea	ecx, DWORD PTR _ps$[ebp]
	push	ecx
	mov	edx, DWORD PTR _hWnd$[ebp]
	push	edx
	call	DWORD PTR __imp__EndPaint@8
; Line 86
	jmp	SHORT $LN2@WindowProc
$LN7@WindowProc:
; Line 88
	mov	eax, DWORD PTR _lParam$[ebp]
	push	eax
	mov	ecx, DWORD PTR _wParam$[ebp]
	push	ecx
	mov	edx, DWORD PTR _uMsg$[ebp]
	push	edx
	mov	eax, DWORD PTR _hWnd$[ebp]
	push	eax
	call	DWORD PTR __imp__DefWindowProcA@16
	jmp	SHORT $LN1@WindowProc
$LN2@WindowProc:
; Line 91
	xor	eax, eax
$LN1@WindowProc:
; Line 92
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_WindowProc@16 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_wcex$ = -84						; size = 48
_msg$ = -36						; size = 28
_hwnd$ = -8						; size = 4
_bQuit$ = -4						; size = 4
_hInstance$ = 8						; size = 4
_hPrevInstance$ = 12					; size = 4
_lpCmdLine$ = 16					; size = 4
_nCmdShow$ = 20						; size = 4
_WinMain@16 PROC
; File hello.c
; Line 9
	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
; Line 15
	mov	DWORD PTR _bQuit$[ebp], 0
; Line 17
	mov	DWORD PTR _wcex$[ebp], 48		; 00000030H
; Line 18
	mov	DWORD PTR _wcex$[ebp+4], 32		; 00000020H
; Line 19
	mov	DWORD PTR _wcex$[ebp+8], OFFSET _WindowProc@16
; Line 20
	mov	DWORD PTR _wcex$[ebp+12], 0
; Line 21
	mov	DWORD PTR _wcex$[ebp+16], 0
; Line 22
	mov	eax, DWORD PTR _hInstance$[ebp]
	mov	DWORD PTR _wcex$[ebp+20], eax
; Line 23
	push	32512					; 00007f00H
	push	0
	call	DWORD PTR __imp__LoadIconA@8
	mov	DWORD PTR _wcex$[ebp+24], eax
; Line 24
	push	32512					; 00007f00H
	push	0
	call	DWORD PTR __imp__LoadCursorA@8
	mov	DWORD PTR _wcex$[ebp+28], eax
; Line 25
	push	4
	call	DWORD PTR __imp__GetStockObject@4
	mov	DWORD PTR _wcex$[ebp+32], eax
; Line 26
	mov	DWORD PTR _wcex$[ebp+36], 0
; Line 27
	mov	DWORD PTR _wcex$[ebp+40], OFFSET $SG90573
; Line 28
	push	32512					; 00007f00H
	push	0
	call	DWORD PTR __imp__LoadIconA@8
	mov	DWORD PTR _wcex$[ebp+44], eax
; Line 30
	lea	ecx, DWORD PTR _wcex$[ebp]
	push	ecx
	call	DWORD PTR __imp__RegisterClassExA@4
	movzx	edx, ax
	test	edx, edx
	jne	SHORT $LN4@WinMain
; Line 31
	xor	eax, eax
	jmp	$LN1@WinMain
$LN4@WinMain:
; Line 33
	push	0
	mov	eax, DWORD PTR _hInstance$[ebp]
	push	eax
	push	0
	push	0
	push	480					; 000001e0H
	push	640					; 00000280H
	push	-2147483648				; 80000000H
	push	-2147483648				; 80000000H
	push	13565952				; 00cf0000H
	push	OFFSET $SG90575
	push	OFFSET $SG90576
	push	0
	call	DWORD PTR __imp__CreateWindowExA@48
	mov	DWORD PTR _hwnd$[ebp], eax
; Line 46
	mov	ecx, DWORD PTR _nCmdShow$[ebp]
	push	ecx
	mov	edx, DWORD PTR _hwnd$[ebp]
	push	edx
	call	DWORD PTR __imp__ShowWindow@8
$LN2@WinMain:
; Line 48
	cmp	DWORD PTR _bQuit$[ebp], 0
	jne	SHORT $LN3@WinMain
; Line 50
	push	1
	push	0
	push	0
	push	0
	lea	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	DWORD PTR __imp__PeekMessageA@20
	test	eax, eax
	je	SHORT $LN5@WinMain
; Line 52
	cmp	DWORD PTR _msg$[ebp+4], 18		; 00000012H
	jne	SHORT $LN6@WinMain
; Line 54
	mov	DWORD PTR _bQuit$[ebp], 1
; Line 55
	jmp	SHORT $LN5@WinMain
$LN6@WinMain:
; Line 58
	lea	ecx, DWORD PTR _msg$[ebp]
	push	ecx
	call	DWORD PTR __imp__TranslateMessage@4
; Line 59
	lea	edx, DWORD PTR _msg$[ebp]
	push	edx
	call	DWORD PTR __imp__DispatchMessageA@4
$LN5@WinMain:
; Line 62
	jmp	SHORT $LN2@WinMain
$LN3@WinMain:
; Line 64
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	DWORD PTR __imp__DestroyWindow@4
; Line 66
	mov	eax, DWORD PTR _msg$[ebp+8]
$LN1@WinMain:
; Line 67
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_WinMain@16 ENDP
_TEXT	ENDS
END
