; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.24215.1 

	TITLE	hello.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
$SG92663 DB	'WindowClass', 00H
$SG92665 DB	'Hello, World!', 00H
	ORG $+2
$SG92666 DB	'WindowClass', 00H
_DATA	ENDS
PUBLIC	_WinMain@16
PUBLIC	_WindowProc@16
PUBLIC	_EnableOpenGL
PUBLIC	_DisableOpenGL
PUBLIC	_DrawTriangle
PUBLIC	__real@3f000000
PUBLIC	__real@3f800000
PUBLIC	__real@bf000000
EXTRN	_memset:PROC
EXTRN	__imp__Sleep@4:PROC
EXTRN	__imp__ChoosePixelFormat@8:PROC
EXTRN	__imp__GetStockObject@4:PROC
EXTRN	__imp__SetPixelFormat@12:PROC
EXTRN	__imp__wglCreateContext@4:PROC
EXTRN	__imp__wglDeleteContext@4:PROC
EXTRN	__imp__wglMakeCurrent@8:PROC
EXTRN	__imp__SwapBuffers@4:PROC
EXTRN	__imp__TranslateMessage@4:PROC
EXTRN	__imp__DispatchMessageA@4:PROC
EXTRN	__imp__PeekMessageA@20:PROC
EXTRN	__imp__DefWindowProcA@16:PROC
EXTRN	__imp__PostQuitMessage@4:PROC
EXTRN	__imp__RegisterClassExA@4:PROC
EXTRN	__imp__CreateWindowExA@48:PROC
EXTRN	__imp__DestroyWindow@4:PROC
EXTRN	__imp__ShowWindow@8:PROC
EXTRN	__imp__GetDC@4:PROC
EXTRN	__imp__ReleaseDC@8:PROC
EXTRN	__imp__LoadCursorA@8:PROC
EXTRN	__imp__LoadIconA@8:PROC
EXTRN	__imp__glBegin@4:PROC
EXTRN	__imp__glClear@4:PROC
EXTRN	__imp__glClearColor@16:PROC
EXTRN	__imp__glColor3f@12:PROC
EXTRN	__imp__glEnd@0:PROC
EXTRN	__imp__glVertex2f@8:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT __real@bf000000
CONST	SEGMENT
__real@bf000000 DD 0bf000000r			; -0.5
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_DrawTriangle PROC
; File hello.c
; Line 140
	push	ebp
	mov	ebp, esp
; Line 141
	push	4
	call	DWORD PTR __imp__glBegin@4
; Line 143
	push	ecx
	xorps	xmm0, xmm0
	movss	DWORD PTR [esp], xmm0
	push	ecx
	xorps	xmm0, xmm0
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	call	DWORD PTR __imp__glColor3f@12
	push	ecx
	movss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	xorps	xmm0, xmm0
	movss	DWORD PTR [esp], xmm0
	call	DWORD PTR __imp__glVertex2f@8
; Line 144
	push	ecx
	xorps	xmm0, xmm0
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	xorps	xmm0, xmm0
	movss	DWORD PTR [esp], xmm0
	call	DWORD PTR __imp__glColor3f@12
	push	ecx
	movss	xmm0, DWORD PTR __real@bf000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR [esp], xmm0
	call	DWORD PTR __imp__glVertex2f@8
; Line 145
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	xorps	xmm0, xmm0
	movss	DWORD PTR [esp], xmm0
	push	ecx
	xorps	xmm0, xmm0
	movss	DWORD PTR [esp], xmm0
	call	DWORD PTR __imp__glColor3f@12
	push	ecx
	movss	xmm0, DWORD PTR __real@bf000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@bf000000
	movss	DWORD PTR [esp], xmm0
	call	DWORD PTR __imp__glVertex2f@8
; Line 147
	call	DWORD PTR __imp__glEnd@0
; Line 148
	pop	ebp
	ret	0
_DrawTriangle ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_hWnd$ = 8						; size = 4
_hDC$ = 12						; size = 4
_hRC$ = 16						; size = 4
_DisableOpenGL PROC
; File hello.c
; Line 133
	push	ebp
	mov	ebp, esp
; Line 134
	push	0
	push	0
	call	DWORD PTR __imp__wglMakeCurrent@8
; Line 135
	mov	eax, DWORD PTR _hRC$[ebp]
	push	eax
	call	DWORD PTR __imp__wglDeleteContext@4
; Line 136
	mov	ecx, DWORD PTR _hDC$[ebp]
	push	ecx
	mov	edx, DWORD PTR _hWnd$[ebp]
	push	edx
	call	DWORD PTR __imp__ReleaseDC@8
; Line 137
	pop	ebp
	ret	0
_DisableOpenGL ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_iFormat$ = -52						; size = 4
_hRC$ = -48						; size = 4
_pfd$ = -44						; size = 40
__$ArrayPad$ = -4					; size = 4
_hDC$ = 8						; size = 4
_EnableOpenGL PROC
; File hello.c
; Line 105
	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 106
	mov	DWORD PTR _hRC$[ebp], 0
; Line 112
	push	40					; 00000028H
	push	0
	lea	eax, DWORD PTR _pfd$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
; Line 114
	mov	ecx, 40					; 00000028H
	mov	WORD PTR _pfd$[ebp], cx
; Line 115
	mov	edx, 1
	mov	WORD PTR _pfd$[ebp+2], dx
; Line 116
	mov	DWORD PTR _pfd$[ebp+4], 37		; 00000025H
; Line 117
	mov	BYTE PTR _pfd$[ebp+8], 0
; Line 118
	mov	BYTE PTR _pfd$[ebp+9], 24		; 00000018H
; Line 119
	mov	BYTE PTR _pfd$[ebp+23], 16		; 00000010H
; Line 120
	mov	BYTE PTR _pfd$[ebp+26], 0
; Line 122
	lea	eax, DWORD PTR _pfd$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hDC$[ebp]
	push	ecx
	call	DWORD PTR __imp__ChoosePixelFormat@8
	mov	DWORD PTR _iFormat$[ebp], eax
; Line 124
	lea	edx, DWORD PTR _pfd$[ebp]
	push	edx
	mov	eax, DWORD PTR _iFormat$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hDC$[ebp]
	push	ecx
	call	DWORD PTR __imp__SetPixelFormat@12
; Line 126
	mov	edx, DWORD PTR _hDC$[ebp]
	push	edx
	call	DWORD PTR __imp__wglCreateContext@4
	mov	DWORD PTR _hRC$[ebp], eax
; Line 127
	mov	eax, DWORD PTR _hRC$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hDC$[ebp]
	push	ecx
	call	DWORD PTR __imp__wglMakeCurrent@8
; Line 129
	mov	eax, DWORD PTR _hRC$[ebp]
; Line 130
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_EnableOpenGL ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv64 = -4						; size = 4
_hWnd$ = 8						; size = 4
_uMsg$ = 12						; size = 4
_wParam$ = 16						; size = 4
_lParam$ = 20						; size = 4
_WindowProc@16 PROC
; File hello.c
; Line 87
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 88
	mov	eax, DWORD PTR _uMsg$[ebp]
	mov	DWORD PTR tv64[ebp], eax
	cmp	DWORD PTR tv64[ebp], 2
	je	SHORT $LN5@WindowProc
	cmp	DWORD PTR tv64[ebp], 16			; 00000010H
	je	SHORT $LN4@WindowProc
	jmp	SHORT $LN6@WindowProc
$LN4@WindowProc:
; Line 91
	push	0
	call	DWORD PTR __imp__PostQuitMessage@4
; Line 92
	jmp	SHORT $LN2@WindowProc
$LN5@WindowProc:
; Line 95
	xor	eax, eax
	jmp	SHORT $LN1@WindowProc
$LN6@WindowProc:
; Line 98
	mov	ecx, DWORD PTR _lParam$[ebp]
	push	ecx
	mov	edx, DWORD PTR _wParam$[ebp]
	push	edx
	mov	eax, DWORD PTR _uMsg$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hWnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__DefWindowProcA@16
	jmp	SHORT $LN1@WindowProc
$LN2@WindowProc:
; Line 101
	xor	eax, eax
$LN1@WindowProc:
; Line 102
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_WindowProc@16 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_wcex$ = -92						; size = 48
_msg$ = -44						; size = 28
_hRC$ = -16						; size = 4
_bQuit$ = -12						; size = 4
_hDC$ = -8						; size = 4
_hWnd$ = -4						; size = 4
_hInstance$ = 8						; size = 4
_hPrevInstance$ = 12					; size = 4
_lpCmdLine$ = 16					; size = 4
_nCmdShow$ = 20						; size = 4
_WinMain@16 PROC
; File hello.c
; Line 11
	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
; Line 17
	mov	DWORD PTR _bQuit$[ebp], 0
; Line 19
	mov	DWORD PTR _wcex$[ebp], 48		; 00000030H
; Line 20
	mov	DWORD PTR _wcex$[ebp+4], 32		; 00000020H
; Line 21
	mov	DWORD PTR _wcex$[ebp+8], OFFSET _WindowProc@16
; Line 22
	mov	DWORD PTR _wcex$[ebp+12], 0
; Line 23
	mov	DWORD PTR _wcex$[ebp+16], 0
; Line 24
	mov	eax, DWORD PTR _hInstance$[ebp]
	mov	DWORD PTR _wcex$[ebp+20], eax
; Line 25
	push	32512					; 00007f00H
	push	0
	call	DWORD PTR __imp__LoadIconA@8
	mov	DWORD PTR _wcex$[ebp+24], eax
; Line 26
	push	32512					; 00007f00H
	push	0
	call	DWORD PTR __imp__LoadCursorA@8
	mov	DWORD PTR _wcex$[ebp+28], eax
; Line 27
	push	4
	call	DWORD PTR __imp__GetStockObject@4
	mov	DWORD PTR _wcex$[ebp+32], eax
; Line 28
	mov	DWORD PTR _wcex$[ebp+36], 0
; Line 29
	mov	DWORD PTR _wcex$[ebp+40], OFFSET $SG92663
; Line 30
	push	32512					; 00007f00H
	push	0
	call	DWORD PTR __imp__LoadIconA@8
	mov	DWORD PTR _wcex$[ebp+44], eax
; Line 32
	lea	ecx, DWORD PTR _wcex$[ebp]
	push	ecx
	call	DWORD PTR __imp__RegisterClassExA@4
	movzx	edx, ax
	test	edx, edx
	jne	SHORT $LN4@WinMain
; Line 33
	xor	eax, eax
	jmp	$LN1@WinMain
$LN4@WinMain:
; Line 35
	push	0
	mov	eax, DWORD PTR _hInstance$[ebp]
	push	eax
	push	0
	push	0
	push	480					; 000001e0H
	push	640					; 00000280H
	push	-2147483648				; 80000000H
	push	-2147483648				; 80000000H
	push	13565952				; 00cf0000H
	push	OFFSET $SG92665
	push	OFFSET $SG92666
	push	0
	call	DWORD PTR __imp__CreateWindowExA@48
	mov	DWORD PTR _hWnd$[ebp], eax
; Line 48
	mov	ecx, DWORD PTR _nCmdShow$[ebp]
	push	ecx
	mov	edx, DWORD PTR _hWnd$[ebp]
	push	edx
	call	DWORD PTR __imp__ShowWindow@8
; Line 50
	mov	eax, DWORD PTR _hWnd$[ebp]
	push	eax
	call	DWORD PTR __imp__GetDC@4
	mov	DWORD PTR _hDC$[ebp], eax
; Line 51
	mov	ecx, DWORD PTR _hDC$[ebp]
	push	ecx
	call	_EnableOpenGL
	add	esp, 4
	mov	DWORD PTR _hRC$[ebp], eax
$LN2@WinMain:
; Line 53
	cmp	DWORD PTR _bQuit$[ebp], 0
	jne	$LN3@WinMain
; Line 55
	push	1
	push	0
	push	0
	push	0
	lea	edx, DWORD PTR _msg$[ebp]
	push	edx
	call	DWORD PTR __imp__PeekMessageA@20
	test	eax, eax
	je	SHORT $LN5@WinMain
; Line 57
	cmp	DWORD PTR _msg$[ebp+4], 18		; 00000012H
	jne	SHORT $LN7@WinMain
; Line 59
	mov	DWORD PTR _bQuit$[ebp], 1
; Line 60
	jmp	SHORT $LN8@WinMain
$LN7@WinMain:
; Line 63
	lea	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	DWORD PTR __imp__TranslateMessage@4
; Line 64
	lea	ecx, DWORD PTR _msg$[ebp]
	push	ecx
	call	DWORD PTR __imp__DispatchMessageA@4
$LN8@WinMain:
; Line 66
	jmp	SHORT $LN6@WinMain
$LN5@WinMain:
; Line 69
	push	ecx
	xorps	xmm0, xmm0
	movss	DWORD PTR [esp], xmm0
	push	ecx
	xorps	xmm0, xmm0
	movss	DWORD PTR [esp], xmm0
	push	ecx
	xorps	xmm0, xmm0
	movss	DWORD PTR [esp], xmm0
	push	ecx
	xorps	xmm0, xmm0
	movss	DWORD PTR [esp], xmm0
	call	DWORD PTR __imp__glClearColor@16
; Line 70
	push	16384					; 00004000H
	call	DWORD PTR __imp__glClear@4
; Line 72
	call	_DrawTriangle
; Line 74
	mov	edx, DWORD PTR _hDC$[ebp]
	push	edx
	call	DWORD PTR __imp__SwapBuffers@4
; Line 76
	push	1
	call	DWORD PTR __imp__Sleep@4
$LN6@WinMain:
; Line 78
	jmp	$LN2@WinMain
$LN3@WinMain:
; Line 80
	mov	eax, DWORD PTR _hRC$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hDC$[ebp]
	push	ecx
	mov	edx, DWORD PTR _hWnd$[ebp]
	push	edx
	call	_DisableOpenGL
	add	esp, 12					; 0000000cH
; Line 81
	mov	eax, DWORD PTR _hWnd$[ebp]
	push	eax
	call	DWORD PTR __imp__DestroyWindow@4
; Line 83
	mov	eax, DWORD PTR _msg$[ebp+8]
$LN1@WinMain:
; Line 84
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_WinMain@16 ENDP
_TEXT	ENDS
END
