; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.24215.1 

	TITLE	hello.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_g_pD3D
PUBLIC	_g_pd3dDevice
PUBLIC	_g_pVB
_BSS	SEGMENT
_g_pD3D	DD	01H DUP (?)
_g_pd3dDevice DD 01H DUP (?)
_g_pVB	DD	01H DUP (?)
_BSS	ENDS
_DATA	SEGMENT
$SG95913 DB	'helloWindow', 00H
$SG95914 DB	'Hello, World!', 00H
_DATA	ENDS
PUBLIC	_WinMain@16
PUBLIC	_WndProc@16
PUBLIC	_InitD3D
PUBLIC	_InitVB
PUBLIC	_Cleanup
PUBLIC	_Render
PUBLIC	__real@3f800000
PUBLIC	__real@42c80000
PUBLIC	__real@43960000
PUBLIC	__real@43c80000
PUBLIC	__real@43fa0000
EXTRN	_memcpy:PROC
EXTRN	__imp__TranslateMessage@4:PROC
EXTRN	__imp__DispatchMessageA@4:PROC
EXTRN	__imp__PeekMessageA@20:PROC
EXTRN	__imp__DefWindowProcA@16:PROC
EXTRN	__imp__PostQuitMessage@4:PROC
EXTRN	__imp__RegisterClassExA@4:PROC
EXTRN	__imp__CreateWindowExA@48:PROC
EXTRN	__imp__ShowWindow@8:PROC
EXTRN	__imp__UpdateWindow@4:PROC
EXTRN	__imp__LoadCursorA@8:PROC
EXTRN	__imp__LoadIconA@8:PROC
EXTRN	_Direct3DCreate9@4:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT __real@43fa0000
CONST	SEGMENT
__real@43fa0000 DD 043fa0000r			; 500
CONST	ENDS
;	COMDAT __real@43c80000
CONST	SEGMENT
__real@43c80000 DD 043c80000r			; 400
CONST	ENDS
;	COMDAT __real@43960000
CONST	SEGMENT
__real@43960000 DD 043960000r			; 300
CONST	ENDS
;	COMDAT __real@42c80000
CONST	SEGMENT
__real@42c80000 DD 042c80000r			; 100
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_Render	PROC
; File hello.c
; Line 179
	push	ebp
	mov	ebp, esp
; Line 180
	cmp	DWORD PTR _g_pd3dDevice, 0
	jne	SHORT $LN2@Render
; Line 182
	jmp	$LN1@Render
$LN2@Render:
; Line 185
	push	0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	-1
	push	1
	push	0
	push	0
	mov	eax, DWORD PTR _g_pd3dDevice
	push	eax
	mov	ecx, DWORD PTR _g_pd3dDevice
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+172]
	call	eax
; Line 187
	mov	ecx, DWORD PTR _g_pd3dDevice
	push	ecx
	mov	edx, DWORD PTR _g_pd3dDevice
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+164]
	call	ecx
	test	eax, eax
	jl	SHORT $LN3@Render
; Line 189
	push	20					; 00000014H
	push	0
	mov	edx, DWORD PTR _g_pVB
	push	edx
	push	0
	mov	eax, DWORD PTR _g_pd3dDevice
	push	eax
	mov	ecx, DWORD PTR _g_pd3dDevice
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+400]
	call	eax
; Line 190
	push	68					; 00000044H
	mov	ecx, DWORD PTR _g_pd3dDevice
	push	ecx
	mov	edx, DWORD PTR _g_pd3dDevice
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+356]
	call	ecx
; Line 191
	push	1
	push	0
	push	4
	mov	edx, DWORD PTR _g_pd3dDevice
	push	edx
	mov	eax, DWORD PTR _g_pd3dDevice
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+324]
	call	edx
; Line 193
	mov	eax, DWORD PTR _g_pd3dDevice
	push	eax
	mov	ecx, DWORD PTR _g_pd3dDevice
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+168]
	call	eax
$LN3@Render:
; Line 196
	push	0
	push	0
	push	0
	push	0
	mov	ecx, DWORD PTR _g_pd3dDevice
	push	ecx
	mov	edx, DWORD PTR _g_pd3dDevice
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+68]
	call	ecx
$LN1@Render:
; Line 197
	pop	ebp
	ret	0
_Render	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_Cleanup PROC
; File hello.c
; Line 161
	push	ebp
	mov	ebp, esp
; Line 162
	cmp	DWORD PTR _g_pVB, 0
	je	SHORT $LN2@Cleanup
; Line 164
	mov	eax, DWORD PTR _g_pVB
	push	eax
	mov	ecx, DWORD PTR _g_pVB
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+8]
	call	eax
$LN2@Cleanup:
; Line 167
	cmp	DWORD PTR _g_pd3dDevice, 0
	je	SHORT $LN3@Cleanup
; Line 169
	mov	ecx, DWORD PTR _g_pd3dDevice
	push	ecx
	mov	edx, DWORD PTR _g_pd3dDevice
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+8]
	call	ecx
$LN3@Cleanup:
; Line 172
	cmp	DWORD PTR _g_pD3D, 0
	je	SHORT $LN1@Cleanup
; Line 174
	mov	edx, DWORD PTR _g_pD3D
	push	edx
	mov	eax, DWORD PTR _g_pD3D
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	call	edx
$LN1@Cleanup:
; Line 176
	pop	ebp
	ret	0
_Cleanup ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_pVertices$ = -68					; size = 4
_vertices$ = -64					; size = 60
__$ArrayPad$ = -4					; size = 4
_InitVB	PROC
; File hello.c
; Line 131
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 132
	movss	xmm0, DWORD PTR __real@43960000
	movss	DWORD PTR _vertices$[ebp], xmm0
	movss	xmm0, DWORD PTR __real@42c80000
	movss	DWORD PTR _vertices$[ebp+4], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR _vertices$[ebp+8], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _vertices$[ebp+12], xmm0
	mov	DWORD PTR _vertices$[ebp+16], -65536	; ffff0000H
	movss	xmm0, DWORD PTR __real@43fa0000
	movss	DWORD PTR _vertices$[ebp+20], xmm0
	movss	xmm0, DWORD PTR __real@43c80000
	movss	DWORD PTR _vertices$[ebp+24], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR _vertices$[ebp+28], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _vertices$[ebp+32], xmm0
	mov	DWORD PTR _vertices$[ebp+36], -16711936	; ff00ff00H
	movss	xmm0, DWORD PTR __real@42c80000
	movss	DWORD PTR _vertices$[ebp+40], xmm0
	movss	xmm0, DWORD PTR __real@43c80000
	movss	DWORD PTR _vertices$[ebp+44], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR _vertices$[ebp+48], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _vertices$[ebp+52], xmm0
	mov	DWORD PTR _vertices$[ebp+56], -16776961	; ff0000ffH
; Line 139
	push	0
	push	OFFSET _g_pVB
	push	0
	push	68					; 00000044H
	push	0
	push	60					; 0000003cH
	mov	eax, DWORD PTR _g_pd3dDevice
	push	eax
	mov	ecx, DWORD PTR _g_pd3dDevice
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+104]
	call	eax
	test	eax, eax
	jge	SHORT $LN2@InitVB
; Line 148
	mov	eax, -2147467259			; 80004005H
	jmp	SHORT $LN1@InitVB
$LN2@InitVB:
; Line 152
	push	0
	lea	ecx, DWORD PTR _pVertices$[ebp]
	push	ecx
	push	60					; 0000003cH
	push	0
	mov	edx, DWORD PTR _g_pVB
	push	edx
	mov	eax, DWORD PTR _g_pVB
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+44]
	call	edx
	test	eax, eax
	jge	SHORT $LN3@InitVB
; Line 153
	mov	eax, -2147467259			; 80004005H
	jmp	SHORT $LN1@InitVB
$LN3@InitVB:
; Line 154
	push	60					; 0000003cH
	lea	eax, DWORD PTR _vertices$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pVertices$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 155
	mov	edx, DWORD PTR _g_pVB
	push	edx
	mov	eax, DWORD PTR _g_pVB
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+48]
	call	edx
; Line 157
	xor	eax, eax
$LN1@InitVB:
; Line 158
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_InitVB	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_d3dpp$ = -60						; size = 56
_hr$ = -4						; size = 4
_hWnd$ = 8						; size = 4
_InitD3D PROC
; File hello.c
; Line 88
	push	ebp
	mov	ebp, esp
	sub	esp, 60					; 0000003cH
; Line 91
	push	32					; 00000020H
	call	_Direct3DCreate9@4
	mov	DWORD PTR _g_pD3D, eax
; Line 92
	cmp	DWORD PTR _g_pD3D, 0
	jne	SHORT $LN2@InitD3D
; Line 94
	mov	eax, -2147467259			; 80004005H
	jmp	$LN1@InitD3D
$LN2@InitD3D:
; Line 97
	mov	DWORD PTR _d3dpp$[ebp], 0
; Line 98
	mov	DWORD PTR _d3dpp$[ebp+4], 0
; Line 99
	mov	DWORD PTR _d3dpp$[ebp+8], 0
; Line 100
	mov	DWORD PTR _d3dpp$[ebp+12], 0
; Line 101
	mov	DWORD PTR _d3dpp$[ebp+16], 0
; Line 102
	mov	DWORD PTR _d3dpp$[ebp+20], 0
; Line 103
	mov	DWORD PTR _d3dpp$[ebp+24], 1
; Line 104
	mov	DWORD PTR _d3dpp$[ebp+28], 0
; Line 105
	mov	DWORD PTR _d3dpp$[ebp+32], 1
; Line 106
	mov	DWORD PTR _d3dpp$[ebp+36], 0
; Line 107
	mov	DWORD PTR _d3dpp$[ebp+40], 0
; Line 108
	mov	DWORD PTR _d3dpp$[ebp+44], 0
; Line 109
	mov	DWORD PTR _d3dpp$[ebp+48], 0
; Line 110
	mov	DWORD PTR _d3dpp$[ebp+52], 0
; Line 112
	push	OFFSET _g_pd3dDevice
	lea	eax, DWORD PTR _d3dpp$[ebp]
	push	eax
	push	32					; 00000020H
	mov	ecx, DWORD PTR _hWnd$[ebp]
	push	ecx
	push	1
	push	0
	mov	edx, DWORD PTR _g_pD3D
	push	edx
	mov	eax, DWORD PTR _g_pD3D
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+64]
	call	edx
	mov	DWORD PTR _hr$[ebp], eax
; Line 122
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN3@InitD3D
; Line 124
	mov	eax, -2147467259			; 80004005H
	jmp	SHORT $LN1@InitD3D
$LN3@InitD3D:
; Line 127
	xor	eax, eax
$LN1@InitD3D:
; Line 128
	mov	esp, ebp
	pop	ebp
	ret	0
_InitD3D ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv64 = -4						; size = 4
_hWnd$ = 8						; size = 4
_message$ = 12						; size = 4
_wParam$ = 16						; size = 4
_lParam$ = 20						; size = 4
_WndProc@16 PROC
; File hello.c
; Line 75
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 76
	mov	eax, DWORD PTR _message$[ebp]
	mov	DWORD PTR tv64[ebp], eax
	cmp	DWORD PTR tv64[ebp], 2
	je	SHORT $LN4@WndProc
	jmp	SHORT $LN2@WndProc
$LN4@WndProc:
; Line 79
	call	_Cleanup
; Line 80
	push	0
	call	DWORD PTR __imp__PostQuitMessage@4
; Line 81
	xor	eax, eax
	jmp	SHORT $LN1@WndProc
$LN2@WndProc:
; Line 84
	mov	ecx, DWORD PTR _lParam$[ebp]
	push	ecx
	mov	edx, DWORD PTR _wParam$[ebp]
	push	edx
	mov	eax, DWORD PTR _message$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hWnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__DefWindowProcA@16
$LN1@WndProc:
; Line 85
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_WndProc@16 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_wcex$ = -88						; size = 48
_msg$ = -40						; size = 28
_lpszWindowName$ = -12					; size = 4
_lpszClassName$ = -8					; size = 4
_hWnd$ = -4						; size = 4
_hInstance$ = 8						; size = 4
_hPrevInstance$ = 12					; size = 4
_lpCmdLine$ = 16					; size = 4
_nCmdShow$ = 20						; size = 4
_WinMain@16 PROC
; File hello.c
; Line 23
	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
; Line 24
	mov	DWORD PTR _lpszClassName$[ebp], OFFSET $SG95913
; Line 25
	mov	DWORD PTR _lpszWindowName$[ebp], OFFSET $SG95914
; Line 26
	mov	DWORD PTR _msg$[ebp], 0
	xor	eax, eax
	mov	DWORD PTR _msg$[ebp+4], eax
	mov	DWORD PTR _msg$[ebp+8], eax
	mov	DWORD PTR _msg$[ebp+12], eax
	mov	DWORD PTR _msg$[ebp+16], eax
	mov	DWORD PTR _msg$[ebp+20], eax
	mov	DWORD PTR _msg$[ebp+24], eax
; Line 30
	mov	DWORD PTR _wcex$[ebp], 48		; 00000030H
; Line 31
	mov	DWORD PTR _wcex$[ebp+4], 3
; Line 32
	mov	DWORD PTR _wcex$[ebp+8], OFFSET _WndProc@16
; Line 33
	mov	DWORD PTR _wcex$[ebp+12], 0
; Line 34
	mov	DWORD PTR _wcex$[ebp+16], 0
; Line 35
	mov	ecx, DWORD PTR _hInstance$[ebp]
	mov	DWORD PTR _wcex$[ebp+20], ecx
; Line 36
	push	32512					; 00007f00H
	mov	edx, DWORD PTR _hInstance$[ebp]
	push	edx
	call	DWORD PTR __imp__LoadIconA@8
	mov	DWORD PTR _wcex$[ebp+24], eax
; Line 37
	push	32512					; 00007f00H
	push	0
	call	DWORD PTR __imp__LoadCursorA@8
	mov	DWORD PTR _wcex$[ebp+28], eax
; Line 38
	mov	DWORD PTR _wcex$[ebp+32], 6
; Line 39
	mov	DWORD PTR _wcex$[ebp+36], 0
; Line 40
	mov	eax, DWORD PTR _lpszClassName$[ebp]
	mov	DWORD PTR _wcex$[ebp+40], eax
; Line 41
	push	32512					; 00007f00H
	mov	ecx, DWORD PTR _hInstance$[ebp]
	push	ecx
	call	DWORD PTR __imp__LoadIconA@8
	mov	DWORD PTR _wcex$[ebp+44], eax
; Line 43
	lea	edx, DWORD PTR _wcex$[ebp]
	push	edx
	call	DWORD PTR __imp__RegisterClassExA@4
; Line 44
	push	0
	mov	eax, DWORD PTR _hInstance$[ebp]
	push	eax
	push	0
	push	0
	push	480					; 000001e0H
	push	640					; 00000280H
	push	-2147483648				; 80000000H
	push	-2147483648				; 80000000H
	push	13565952				; 00cf0000H
	mov	ecx, DWORD PTR _lpszWindowName$[ebp]
	push	ecx
	mov	edx, DWORD PTR _lpszClassName$[ebp]
	push	edx
	push	0
	call	DWORD PTR __imp__CreateWindowExA@48
	mov	DWORD PTR _hWnd$[ebp], eax
; Line 52
	mov	eax, DWORD PTR _hWnd$[ebp]
	push	eax
	call	_InitD3D
	add	esp, 4
; Line 53
	call	_InitVB
; Line 55
	push	10					; 0000000aH
	mov	ecx, DWORD PTR _hWnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__ShowWindow@8
; Line 56
	mov	edx, DWORD PTR _hWnd$[ebp]
	push	edx
	call	DWORD PTR __imp__UpdateWindow@4
$LN2@WinMain:
; Line 58
	cmp	DWORD PTR _msg$[ebp+4], 18		; 00000012H
	je	SHORT $LN3@WinMain
; Line 60
	push	1
	push	0
	push	0
	push	0
	lea	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	DWORD PTR __imp__PeekMessageA@20
	test	eax, eax
	je	SHORT $LN4@WinMain
; Line 62
	lea	ecx, DWORD PTR _msg$[ebp]
	push	ecx
	call	DWORD PTR __imp__TranslateMessage@4
; Line 63
	lea	edx, DWORD PTR _msg$[ebp]
	push	edx
	call	DWORD PTR __imp__DispatchMessageA@4
; Line 64
	jmp	SHORT $LN5@WinMain
$LN4@WinMain:
; Line 67
	call	_Render
$LN5@WinMain:
; Line 69
	jmp	SHORT $LN2@WinMain
$LN3@WinMain:
; Line 71
	xor	eax, eax
; Line 72
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_WinMain@16 ENDP
_TEXT	ENDS
END
